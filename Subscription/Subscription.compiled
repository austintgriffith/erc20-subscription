pragma solidity ^0.4.24;

/*
   Token Subscriptions on the Blockchain

   WIP POC simplified version of  EIP-1337 / ERC-948

   BYOC - Subscriber 'Brings Your Own Contract'

   Subscriber deploys their own contract that can be used for a number of
   different subscriptions. This is a little more complex than the
   'publisher deploys' model but it is more powerful and flexible too

   //this model of BYOC subscriptions will try to adhere to the ERC948 standards
   //https://gist.github.com/androolloyd/0a62ef48887be00a5eff5c17f2be849a
   //big thanks to my dude Andrew Redden @androolloyd

   Austin Thomas Griffith - https://austingriffith.com

   https://github.com/austintgriffith/token-subscription

   Building on previous works:
    https://media.consensys.net/subscription-services-on-the-blockchain-erc-948-6ef64b083a36
    https://medium.com/gitcoin/technical-deep-dive-architecture-choices-for-subscriptions-on-the-blockchain-erc948-5fae89cabc7a
    https://github.com/ethereum/EIPs/pull/1337
    https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1077.md
    https://github.com/gnosis/safe-contracts

  Earlier Meta Transaction Demo:
    https://github.com/austintgriffith/bouncer-proxy

  Huge thanks to, as always, to OpenZeppelin for the rad contracts:
 */



/**
 * @title Elliptic curve signature operations
 * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d
 * TODO Remove this library once solidity supports passing a signature to ecrecover.
 * See https://github.com/ethereum/solidity/issues/864
 */

library ECRecovery {

  /**
   * @dev Recover signer address from a message by using their signature
   * @param _hash bytes32 message, the hash is the signed message. What is recovered is the signer address.
   * @param _signature bytes signature, the signature is generated using web3.eth.sign()
   */
  function recover(bytes32 _hash, bytes _signature)
    internal
    pure
    returns (address)
  {
    bytes32 r;
    bytes32 s;
    uint8 v;

    // Check the signature length
    if (_signature.length != 65) {
      return (address(0));
    }

    // Divide the signature in r, s and v variables
    // ecrecover takes the signature parameters, and the only way to get them
    // currently is to use assembly.
    // solium-disable-next-line security/no-inline-assembly
    assembly {
      r := mload(add(_signature, 32))
      s := mload(add(_signature, 64))
      v := byte(0, mload(add(_signature, 96)))
    }

    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions
    if (v < 27) {
      v += 27;
    }

    // If the version is correct return the signer address
    if (v != 27 && v != 28) {
      return (address(0));
    } else {
      // solium-disable-next-line arg-overflow
      return ecrecover(_hash, v, r, s);
    }
  }

  /**
   * toEthSignedMessageHash
   * @dev prefix a bytes32 value with "\x19Ethereum Signed Message:"
   * and hash the result
   */
  function toEthSignedMessageHash(bytes32 _hash)
    internal
    pure
    returns (bytes32)
  {
    // 32 is the length in bytes of hash,
    // enforced by the type signature above
    return keccak256(
      abi.encodePacked("\x19Ethereum Signed Message:\n32", _hash)
    );
  }
}



/**
 * @title SafeMath
 * @dev Math operations with safety checks that revert on error
 */
library SafeMath {

  /**
  * @dev Multiplies two numbers, reverts on overflow.
  */
  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {
    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
    // benefit is lost if 'b' is also tested.
    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
    if (_a == 0) {
      return 0;
    }

    uint256 c = _a * _b;
    require(c / _a == _b);

    return c;
  }

  /**
  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.
  */
  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {
    require(_b > 0); // Solidity only automatically asserts when dividing by 0
    uint256 c = _a / _b;
    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold

    return c;
  }

  /**
  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {
    require(_b <= _a);
    uint256 c = _a - _b;

    return c;
  }

  /**
  * @dev Adds two numbers, reverts on overflow.
  */
  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {
    uint256 c = _a + _b;
    require(c >= _a);

    return c;
  }

  /**
  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),
  * reverts when dividing by zero.
  */
  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b != 0);
    return a % b;
  }
}



/**
 * @title Ownable
 * @dev The Ownable contract has an owner address, and provides basic authorization control
 * functions, this simplifies the implementation of "user permissions".
 */
contract Ownable {
  address public owner;


  event OwnershipRenounced(address indexed previousOwner);
  event OwnershipTransferred(
    address indexed previousOwner,
    address indexed newOwner
  );


  /**
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender
   * account.
   */
  constructor() public {
    owner = msg.sender;
  }

  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }

  /**
   * @dev Allows the current owner to relinquish control of the contract.
   * @notice Renouncing to ownership will leave the contract without an owner.
   * It will not be possible to call the functions with the `onlyOwner`
   * modifier anymore.
   */
  function renounceOwnership() public onlyOwner {
    emit OwnershipRenounced(owner);
    owner = address(0);
  }

  /**
   * @dev Allows the current owner to transfer control of the contract to a newOwner.
   * @param _newOwner The address to transfer ownership to.
   */
  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }

  /**
   * @dev Transfers control of the contract to a newOwner.
   * @param _newOwner The address to transfer ownership to.
   */
  function _transferOwnership(address _newOwner) internal {
    require(_newOwner != address(0));
    emit OwnershipTransferred(owner, _newOwner);
    owner = _newOwner;
  }
}




/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
interface IERC20 {
  function totalSupply() public view returns (uint256);

  function balanceOf(address _who) public view returns (uint256);

  function allowance(address _owner, address _spender)
    public view returns (uint256);

  function transfer(address _to, uint256 _value) public returns (bool);

  function approve(address _spender, uint256 _value)
    public returns (bool);

  function transferFrom(address _from, address _to, uint256 _value)
    public returns (bool);

  event Transfer(
    address indexed from,
    address indexed to,
    uint256 value
  );

  event Approval(
    address indexed owner,
    address indexed spender,
    uint256 value
  );
}



/**
 * @title Standard ERC20 token
 *
 * @dev Implementation of the basic standard token.
 * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md
 * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol
 */
contract ERC20 is IERC20 {
  using SafeMath for uint256;

  mapping (address => uint256) private balances_;

  mapping (address => mapping (address => uint256)) private allowed_;

  uint256 private totalSupply_;

  /**
  * @dev Total number of tokens in existence
  */
  function totalSupply() public view returns (uint256) {
    return totalSupply_;
  }

  /**
  * @dev Gets the balance of the specified address.
  * @param _owner The address to query the the balance of.
  * @return An uint256 representing the amount owned by the passed address.
  */
  function balanceOf(address _owner) public view returns (uint256) {
    return balances_[_owner];
  }

  /**
   * @dev Function to check the amount of tokens that an owner allowed to a spender.
   * @param _owner address The address which owns the funds.
   * @param _spender address The address which will spend the funds.
   * @return A uint256 specifying the amount of tokens still available for the spender.
   */
  function allowance(
    address _owner,
    address _spender
   )
    public
    view
    returns (uint256)
  {
    return allowed_[_owner][_spender];
  }

  /**
  * @dev Transfer token for a specified address
  * @param _to The address to transfer to.
  * @param _value The amount to be transferred.
  */
  function transfer(address _to, uint256 _value) public returns (bool) {
    require(_value <= balances_[msg.sender]);
    require(_to != address(0));

    balances_[msg.sender] = balances_[msg.sender].sub(_value);
    balances_[_to] = balances_[_to].add(_value);
    emit Transfer(msg.sender, _to, _value);
    return true;
  }

  /**
   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
   * Beware that changing an allowance with this method brings the risk that someone may use both the old
   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this
   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:
   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
   * @param _spender The address which will spend the funds.
   * @param _value The amount of tokens to be spent.
   */
  function approve(address _spender, uint256 _value) public returns (bool) {
    allowed_[msg.sender][_spender] = _value;
    emit Approval(msg.sender, _spender, _value);
    return true;
  }

  /**
   * @dev Transfer tokens from one address to another
   * @param _from address The address which you want to send tokens from
   * @param _to address The address which you want to transfer to
   * @param _value uint256 the amount of tokens to be transferred
   */
  function transferFrom(
    address _from,
    address _to,
    uint256 _value
  )
    public
    returns (bool)
  {
    require(_value <= balances_[_from]);
    require(_value <= allowed_[_from][msg.sender]);
    require(_to != address(0));

    balances_[_from] = balances_[_from].sub(_value);
    balances_[_to] = balances_[_to].add(_value);
    allowed_[_from][msg.sender] = allowed_[_from][msg.sender].sub(_value);
    emit Transfer(_from, _to, _value);
    return true;
  }

  /**
   * @dev Increase the amount of tokens that an owner allowed to a spender.
   * approve should be called when allowed_[_spender] == 0. To increment
   * allowed value is better to use this function to avoid 2 calls (and wait until
   * the first transaction is mined)
   * From MonolithDAO Token.sol
   * @param _spender The address which will spend the funds.
   * @param _addedValue The amount of tokens to increase the allowance by.
   */
  function increaseApproval(
    address _spender,
    uint256 _addedValue
  )
    public
    returns (bool)
  {
    allowed_[msg.sender][_spender] = (
      allowed_[msg.sender][_spender].add(_addedValue));
    emit Approval(msg.sender, _spender, allowed_[msg.sender][_spender]);
    return true;
  }

  /**
   * @dev Decrease the amount of tokens that an owner allowed to a spender.
   * approve should be called when allowed_[_spender] == 0. To decrement
   * allowed value is better to use this function to avoid 2 calls (and wait until
   * the first transaction is mined)
   * From MonolithDAO Token.sol
   * @param _spender The address which will spend the funds.
   * @param _subtractedValue The amount of tokens to decrease the allowance by.
   */
  function decreaseApproval(
    address _spender,
    uint256 _subtractedValue
  )
    public
    returns (bool)
  {
    uint256 oldValue = allowed_[msg.sender][_spender];
    if (_subtractedValue >= oldValue) {
      allowed_[msg.sender][_spender] = 0;
    } else {
      allowed_[msg.sender][_spender] = oldValue.sub(_subtractedValue);
    }
    emit Approval(msg.sender, _spender, allowed_[msg.sender][_spender]);
    return true;
  }

  /**
   * @dev Internal function that mints an amount of the token and assigns it to
   * an account. This encapsulates the modification of balances such that the
   * proper events are emitted.
   * @param _account The account that will receive the created tokens.
   * @param _amount The amount that will be created.
   */
  function _mint(address _account, uint256 _amount) internal {
    require(_account != 0);
    totalSupply_ = totalSupply_.add(_amount);
    balances_[_account] = balances_[_account].add(_amount);
    emit Transfer(address(0), _account, _amount);
  }

  /**
   * @dev Internal function that burns an amount of the token of a given
   * account.
   * @param _account The account whose tokens will be burnt.
   * @param _amount The amount that will be burnt.
   */
  function _burn(address _account, uint256 _amount) internal {
    require(_account != 0);
    require(_amount <= balances_[_account]);

    totalSupply_ = totalSupply_.sub(_amount);
    balances_[_account] = balances_[_account].sub(_amount);
    emit Transfer(_account, address(0), _amount);
  }

  /**
   * @dev Internal function that burns an amount of the token of a given
   * account, deducting from the sender's allowance for said account. Uses the
   * internal _burn function.
   * @param _account The account whose tokens will be burnt.
   * @param _amount The amount that will be burnt.
   */
  function _burnFrom(address _account, uint256 _amount) internal {
    require(_amount <= allowed_[_account][msg.sender]);

    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,
    // this function needs to emit an event with the updated approval.
    allowed_[_account][msg.sender] = allowed_[_account][msg.sender].sub(
      _amount);
    _burn(_account, _amount);
  }
}



contract Subscription is Ownable {
    using ECRecovery for bytes32;
    using SafeMath for uint256;

    enum SubscriptionStatus {
        ACTIVE,
        PAUSED,
        CANCELLED,
        EXPIRED
    }
    enum Operation {
       Call,
       DelegateCall,
       Create
    }

    // let's waste some gas and define the author and purpose on chain
    string public author = "Austin Thomas Griffith - https://austingriffith.com";
    string public purpose = "EIP 1337 - POC - BYOC";
    constructor() public { }

    // contract will need to hold funds to pay gas
    // copied from https://github.com/uport-project/uport-identity/blob/develop/contracts/Proxy.sol
    function () public payable {
        emit Received(msg.sender, msg.value);
    }

    event Received (address indexed sender, uint value);
    event ExecuteSubscription(
        address from, //the subscriber
        address to, //the publisher
        uint256 value, //amount in wei of ether sent from this contract to the to address
        bytes data, //the encoded transaction data (first four bytes of fn plus args, etc)
        Operation operation, //ENUM of operation
        uint256 periodSeconds, //the period in seconds between payments
        address gasToken, //the address of the token to pay relayer (0 for eth)
        uint256 gasPrice, //the amount of tokens or eth to pay relayer (0 for free)
        address gasPayer //the address that will pay the tokens to the relayer
    );
    event FailedExecuteSubscription(
        address from, //the subscriber
        address to, //the publisher
        uint256 value, //amount in wei of ether sent from this contract to the to address
        bytes data, //the encoded transaction data (first four bytes of fn plus args, etc)
        Operation operation, //ENUM of operation
        uint256 periodSeconds, //the period in seconds between payments
        address gasToken, //the address of the token to pay relayer (0 for eth)
        uint256 gasPrice, //the amount of tokens or eth to pay relayer (0 for free)
        address gasPayer //the address that will pay the tokens to the relayer
    );
    event ContractCreation(address newContract);

    // similar to a nonce that avoids replay attacks this allows a single execution
    // every x seconds for a given subscription
    // subscriptionHash  => next valid block number
    mapping(bytes32 => uint256) public nextValidTimestamp;

    // subscription status is tracked by subscription hash
    mapping(bytes32 => SubscriptionStatus) public subscriptionStatus;

    // since owners can update the subscriptionStatus with a metaTx, we'll
    // need a nonce to avoid replay attacks
    mapping(bytes32 => uint256) public subscriptionStatusNonce;


    // allow for third party metatx account to make transactions through this
    // contract like an identity but make sure the owner has whitelisted the tx
    mapping(address => bool) public whitelist;
    // let the owner add and remove addresses from the whitelist
    function updateWhitelist(address _account, bool _value)
        public
        onlyOwner
        returns(bool)
    {
        whitelist[_account] = _value;
        return true;
    }

    // this is used by external smart contracts to verify on-chain that a
    // particular subscription is "paid" (has executed within the period)
    // there must be a small grace period added to allow the publisher
    // or desktop miner to execute
    function isSubscriptionPaid(
        bytes32 subscriptionHash,
        uint256 gracePeriodSeconds
    )
        external
        view
        returns (bool)
    {
        return ( block.timestamp >= nextValidTimestamp[subscriptionHash].add(gracePeriodSeconds) );
    }

    // this is used for checking what status the owner has switching it to
    // this is for checking if the owner has moved it to paused even if it
    // is already paid, this can signal that they no longer want to pay the
    // next pay period
    function getSubscriptionStatus(
        bytes32 subscriptionHash
    )
        public
        view
        returns  (uint256)
    {
        return uint256(subscriptionStatus[subscriptionHash]);
    }

    // given the subscription details, generate a hash and try to kind of follow
    // the eip-191 standard and eip-1077 standard from my dude @avsa
    function getSubscriptionHash(
        address from, //the subscriber
        address to, //the publisher
        uint256 value, //amount in wei of ether sent from this contract to the to address
        bytes data, //the encoded transaction data (first four bytes of fn plus args, etc)
        Operation operation, //ENUM of operation
        uint256 periodSeconds, //the period in seconds between payments
        address gasToken, //the address of the token to pay relayer (0 for eth)
        uint256 gasPrice, //the amount of tokens or eth to pay relayer (0 for free)
        address gasPayer //the address that will pay the tokens to the relayer
    )
        public
        view
        returns (bytes32)
    {
        return keccak256(
            abi.encodePacked(
                byte(0x19),
                byte(0),
                address(this),
                from,
                to,
                value,
                data,
                operation,
                periodSeconds,
                gasToken,
                gasPrice,
                gasPayer
            )
        );
    }

    // ecrecover the signer from hash and the signature
    function getSubscriptionSigner(
        bytes32 subscriptionHash, //hash of subscription
        bytes signature //proof the subscriber signed the meta trasaction
    )
        public
        pure
        returns (address)
    {
        return subscriptionHash.toEthSignedMessageHash().recover(signature);
    }

    // check if a subscription is signed correctly and the timestamp is ready for
    // the next execution to happen
    function isSubscriptionReady(
        address from, //the subscriber
        address to, //the publisher
        uint256 value, //amount in wei of ether sent from this contract to the to address
        bytes data, //the encoded transaction data (first four bytes of fn plus args, etc)
        Operation operation, //ENUM of operation
        uint256 periodSeconds, //the period in seconds between payments
        address gasToken, //the address of the token to pay relayer (0 for eth)
        uint256 gasPrice, //the amount of tokens or eth to pay relayer (0 for free)
        address gasPayer, //the address that will pay the tokens to the relayer
        bytes signature //proof the subscriber signed the meta trasaction
    )
        public
        view
        returns (bool)
    {
        bytes32 subscriptionHash = getSubscriptionHash(
            from, to, value, data, operation, periodSeconds, gasToken, gasPrice, gasPayer
        );
        address signer = getSubscriptionSigner(subscriptionHash, signature);
        return ( isValidSignerTimestampAndStatus(from, signer, subscriptionHash) );
    }

    // check if a subscription is signed correctly and the timestamp is ready for
    // the next execution to happen
    function isValidSignerTimestampAndStatus(
        address from,
        address signer,
        bytes32 subscriptionHash
    )
        public
        view
        returns (bool)
    {
        return (
            signer == from &&
            ( signer == owner || whitelist[signer] ) && //only authenticated accounts can exec
            block.timestamp >= nextValidTimestamp[subscriptionHash] &&
            subscriptionStatus[subscriptionHash] == SubscriptionStatus.ACTIVE
        );
    }

    // to modify the status, an owner or whitelisted account needs to sign
    // the hash of the change to send it as a meta tx
    function getModifyStatusHash(
        bytes32 subscriptionHash,
        SubscriptionStatus status
    )
        public
        view
        returns (bytes32)
    {
        return keccak256(
            abi.encodePacked(
                byte(0x19),
                byte(0),
                address(this),
                subscriptionHash,
                status,
                subscriptionStatusNonce[subscriptionHash]
            )
        );
    }

    // check if a subscription is signed correctly and the timestamp is ready for
    // the next execution to happen
    function isValidModifyStatusSigner(
        bytes32 subscriptionHash,
        SubscriptionStatus status,
        bytes signature
    )
        public
        view
        returns (bool)
    {
        address signer = getModifyStatusHash(subscriptionHash, status).toEthSignedMessageHash().recover(signature);
        return (
            ( signer==owner || whitelist[signer] ) &&
            //once the status is expired or cancelled, it can no longer change 
            ( subscriptionStatus[subscriptionHash] == SubscriptionStatus.ACTIVE || subscriptionStatus[subscriptionHash] == SubscriptionStatus.PAUSED )
        );
    }

    // the owner or any of the whitelisted accounts can sign the meta tx to
    // modify the transaction
    function modifyStatus(
        bytes32 subscriptionHash,
        SubscriptionStatus status,
        bytes signature
    )
        public
        returns (bool)
    {
        require(
            isValidModifyStatusSigner(subscriptionHash, status, signature),
            "Invalid modify status signature"
        );
        subscriptionStatusNonce[subscriptionHash]++;
        subscriptionStatus[subscriptionHash] = status;
        return true;
    }

    // execute the operation through delegated execution and reward the miner
    // this function will also increment the timestamp nonce to the next value
    // in which it will be valid
    // we tried to make our execution just like Gnosis Safe so the metatx
    // networks can be similar or even the same
    function executeSubscription(
        address from, //the subscriber
        address to, //the publisher
        uint256 value, //amount in wei of ether sent from this contract to the to address
        bytes data, //the encoded transaction data (first four bytes of fn plus args, etc)
        Operation operation, //ENUM of operation
        uint256 periodSeconds, //the period in seconds between payments
        address gasToken, //the address of the token to pay relayer (0 for eth)
        uint256 gasPrice, //the amount of tokens or eth to pay relayer (0 for free)
        address gasPayer, //the address that will pay the tokens to the relayer
        bytes signature //proof the subscriber signed the meta trasaction
    )
        public
        returns (bool)
    {
        // make sure the subscription is valid and ready
        // pulled this out so I have the hash, should be exact code as "isSubscriptionReady"
        bytes32 subscriptionHash = getSubscriptionHash(
            from, to, value, data, operation, periodSeconds, gasToken, gasPrice, gasPayer
        );
        address signer = getSubscriptionSigner(subscriptionHash, signature);

        //the signature must be valid
        // had to put this in one function because the stack was too deep
        require(
          isValidSignerTimestampAndStatus(from,signer,subscriptionHash),
          "Signature, From Account, Timestamp, or status is invalid"
        );



        // increment the next valid period time
        // we must do this first to prevent reentrance, but if something fails
        // we will want to roll this back so we need to remember it
        uint256 tempValidTimestamp = nextValidTimestamp[subscriptionHash];
        //increment the next valid period time
        if(nextValidTimestamp[subscriptionHash]<=0){
          //if this is the very first, start from the current time
          nextValidTimestamp[subscriptionHash]=block.timestamp+periodSeconds;
        }else{
          nextValidTimestamp[subscriptionHash]=nextValidTimestamp[subscriptionHash]+periodSeconds;
        }

        // now, let's borrow a page out of the Gnosis Safe book and run the execute
        //  give it what ever gas we have minus what we'll need to finish the tx
        //  and pay the desktop miner
        bool result = execute(to, value, data, operation, gasleft() - 48000); // 48000 = TOTAL GUESS RIGHT NOW (TODO: FIGURE OUT HOW MUCH GAS IS USED AFTER THIS AND HARD CODE IT HERE)
        if (result) {
            emit ExecuteSubscription(
                from, to, value, data, operation, periodSeconds, gasToken, gasPrice, gasPayer
            );

            //we only want to reward the miner if the transaction was a success
            // if we reward either way, there is an attack vector where the
            // desktop miner can repeatedly execute the metatx and earn gas
            // without the timestamp incrementing or the tx executing successful

            // it is possible for the subscription execution to be run by a third party
            // incentivized in the terms of the subscription with a gasToken and gasPrice
            // pay that out now...
            if (gasPrice > 0) {
                if (gasToken == address(0)) {
                    // this is a case where the subscriber will pay for the tx using
                    // ethereum out of the subscription contract itself
                    // for this to work the publisher must send ethereum to the contract
                    require(msg.sender.call.value(gasPrice).gas(36000)(),//still unsure about how much gas to use here
                        "Subscription contract failed to pay ether to relayer"
                    );
                } else if (gasPayer == address(this) || gasPayer == address(0)) {
                    // in this case, this contract will pay a token to the relayer to
                    // incentivize them to pay the gas for the meta transaction
                    require(ERC20(gasToken).transfer(msg.sender, gasPrice),
                        "Failed to pay gas as contract"
                    );
                } else {
                    // if all else fails, we expect that some account (CAN BE ANY ACCOUNT)
                    // has approved this contract to move tokens on their behalf
                    // this is really cool because the subscriber, the publisher, OR any
                    // third party could reward the relayers with an approved token
                    require(
                        ERC20(gasToken).transferFrom(gasPayer, msg.sender, gasPrice),
                        "Failed to pay gas in tokens from approved gasPayer"
                    );
                }
            }

        } else {

            //if the transaction is not successful, we want to roll back the timestamp so
            // we can try again soon
            nextValidTimestamp[subscriptionHash] = tempValidTimestamp;

            emit FailedExecuteSubscription(
                from, to, value, data, operation, periodSeconds, gasToken, gasPrice, gasPayer
            );
        }

        return result;
    }



    // Gnosis Safe is the dopest but it has a lot of functionality we dont need
    // let's borrow their executor for different operations here
    // all the love and props go to *** rmeissner ***
    // https://github.com/gnosis/safe-contracts/blob/development/contracts/base/Executor.sol
    function execute(address to, uint256 value, bytes data, Operation operation, uint256 txGas)
       internal
       returns (bool success)
    {
       if (operation == Operation.Call)
           success = executeCall(to, value, data, txGas);
       else if (operation == Operation.DelegateCall)
           success = executeDelegateCall(to, data, txGas);
       else {
           address newContract = executeCreate(data);
           success = newContract != 0;
           emit ContractCreation(newContract);
       }
    }

    function executeCall(address to, uint256 value, bytes data, uint256 txGas)
       internal
       returns (bool success)
    {
       // solium-disable-next-line security/no-inline-assembly
       assembly {
           success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)
       }
    }

    function executeDelegateCall(address to, bytes data, uint256 txGas)
       internal
       returns (bool success)
    {
       // solium-disable-next-line security/no-inline-assembly
       assembly {
           success := delegatecall(txGas, to, add(data, 0x20), mload(data), 0, 0)
       }
    }

    function executeCreate(bytes data)
       internal
       returns (address newContract)
    {
       // solium-disable-next-line security/no-inline-assembly
       assembly {
           newContract := create(0, add(data, 0x20), mload(data))
       }
    }
}




